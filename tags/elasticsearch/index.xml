<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Elasticsearch on dailydreamer</title>
    <link>https://dailydreamer.me/tags/elasticsearch/</link>
    <description>Recent content in Elasticsearch on dailydreamer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 22 Jun 2015 20:00:00 +0800</lastBuildDate>
    
	<atom:link href="https://dailydreamer.me/tags/elasticsearch/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ElasticSearch搜索配置（2）</title>
      <link>https://dailydreamer.me/post/2015-06-22-elasticsearch-config-2/</link>
      <pubDate>Mon, 22 Jun 2015 20:00:00 +0800</pubDate>
      
      <guid>https://dailydreamer.me/post/2015-06-22-elasticsearch-config-2/</guid>
      <description>这次再来说说ElasticSearch的其他一些特性。
Bulk 使用Index进行索引是一次索引一条doc，而bulk提供了批量索引的功能，能够显著的减少索引时间。 经过实际测试，对于1个100Mb约20K条doc，向远程服务器单节点发起索引的完成时间对比如下表。
   chunck_size time/s     200 298.34   500 216.84   1000 169.64   2000 164.71    可以看出chunck_size在一个合适的区间时可以显著减少索引时间，而chunck_size的选取也和一个doc的大小有关。
这里是官方文档。
ElasticSearch的python API中对bulk进行了封装，有helpers.streaming_bulk和helpers.bulk两个方法，官方文档在这。大致使用方法如下：
for success, fail in helpers.streaming_bulk(es, genDoc(filename), index=INDEX, doc_type=DOCTYPE, chunk_size=1000): print &#39;success: &#39;, success  success, fail = helpers.bulk(es, genDoc(filename), index=INDEX, doc_type=DOCTYPE, chunk_size=1000)  其中geDoc()是一个迭代器。 这两个方法的区别在于bulk调用了streaming_bulk并将信息一起返回。
拼音搜索 对于中文内容较多的索引，如果能够使用拼音搜索会十分方便。 ElasticSearch有插件elasticsearch-analysis-pinyin可以实现这个功能。 它可以将中文转化为拼音字母，在建立索引的时候就可以在倒排列表中使对应的拼音字母关联到包含中文的Doc上。
为了将拼音搜索的索引和IK分词的索引结合，需要用到另一个插件elasticsearch-analysis-combo。 它可以将两个Analyzer的结果合并起来得到一个新的Analyzer。
基本的配置如下。
index: analysis: analyzer: ik: alias: [news_analyzer_ik,ik_analyzer] type: org.</description>
    </item>
    
    <item>
      <title>ElasticSearch搜索配置（1）</title>
      <link>https://dailydreamer.me/post/2015-06-05-elasticsearch-config-1/</link>
      <pubDate>Fri, 05 Jun 2015 20:00:00 +0800</pubDate>
      
      <guid>https://dailydreamer.me/post/2015-06-05-elasticsearch-config-1/</guid>
      <description>最近在用ElasticSearch做一些搜索，来谈谈其中用到的一些特性。
ElasticSearch是基于Lucene的分布式包装，其中每一个分片或一个副本都是一个Lucene实例。 ElasticSearch实现了很好的扩展性和冗余，自动负载均衡。可以通过Restful API与ElasticSearch集群交互。 我使用的是python API。
可以参考ElasticSearch权威指南，讲解非常清楚。
建立索引 建立索引的时候可以使用mapping建立对每个字段建立映射。
mapping_body = { &#39;mappings&#39;:{ &#39;tweet&#39;:{ &amp;quot;properties&amp;quot;:{ &#39;text&#39;:{&#39;type&#39;:&#39;string&#39;, &#39;index&#39;:&#39;analyzed&#39;, &#39;analyzer&#39;:&#39;ik_smart&#39;, &#39;similarity&#39;: &#39;BM25&#39;} } } } } es.indices.create(index=&#39;test-index&#39;, body=mapping_body)  上面为&amp;rsquo;test-index&amp;rsquo;的索引中&amp;rsquo;tweet&amp;rsquo;的type中&amp;rsquo;text&amp;rsquo;字段建立映射。
&amp;lsquo;index&amp;rsquo;设置为analyzed说明要先通过分析器，&amp;rsquo;analyzer&amp;rsquo;设置分析器为ik分词的智能粒度切分，默认为standard，不适合中文分词;&amp;lsquo;similarity&amp;rsquo;设置了相似度算法为BM25，默认为向量空间算法。
具体可以看文档。
查询 查询可以通过ID来检索，但是作为一个搜索引擎，ElasticSearch提供了一种基于JSON的DSL查询格式。
search_body = { &amp;quot;query&amp;quot;: { &amp;quot;multi_match&amp;quot;: { &amp;quot;query&amp;quot;: &amp;quot;Hello世界&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;cross_fields&amp;quot;, &amp;quot;operator&amp;quot;: &amp;quot;or&amp;quot;, &amp;quot;fields&amp;quot;: [ &amp;quot;author&amp;quot;, &amp;quot;text^2&amp;quot; ] } }, &#39;highlight&#39;:{ &#39;fields&#39;:{ &#39;author&#39;:{}, &#39;text&#39;:{} } } } res = es.search(index=&#39;test-index&#39;, doc_type=&#39;tweet&#39;, body=search_body)  Query 上面的示例中使用了multi match query来进行多字段查询，multi match query对fields中的每个field进行query查询。</description>
    </item>
    
    <item>
      <title>在AWS上配置ElasticSearch</title>
      <link>https://dailydreamer.me/post/2015-06-02-config-elasticsearch-on-aws/</link>
      <pubDate>Tue, 02 Jun 2015 20:00:00 +0800</pubDate>
      
      <guid>https://dailydreamer.me/post/2015-06-02-config-elasticsearch-on-aws/</guid>
      <description>最近在AWS EC2上部署了ElasticSearch，感觉AWS的文档详细但稍显凌乱，在这里总结一下步骤。
首先注册AWS。注意你需要一张支持外币支付的信用卡。
然后创建IAM用户，并配置其权限和密钥对。 可按照文档中的步骤来。 注意为了使elasticsearch节点启动后能够自动发现别的节点，你可能需要在这一步为该用户而外设置read-only权限。
之后有两种方案，可以直接部署在EC2上，价格便宜量又足。 也可以部署在EMR上，获得Haddop的集群管理能力，方便扩展以及将来部署其它基于Haddop的程序。但是注意使用EMR除了支付EMR的计费还要支付其使用的EC2及S3等的计费。
部署在EC2上 进入EC2控制面板启动实例。 如果你希望数据在EC2实例关闭后不丢失需要为其配置挂载EBS卷并将其存储至EBS中，详细见文档。
注意EBS卷最好在home/ec2-user/下新建目录挂载，上次我挂载在home/ec2-user/下结果不知道.ssh是存在那里的，然后就连接不上了。。。 挂载完EBS卷后需要更改其权限使得普通用户可以读写文件。 sudo chmod 777 ./ -R
之后为其配置EIP来避免每次重启实例后IP地址改变。 EIP是一个固定的共有IP，将其和一个EC2实例的私有IP绑定即可。 这样也方便切换实例而IP不变。
最后即可ssh连接到EC2上然后安装ElasticSearch了。
安装好ElasticSearch之后还需安装elasticsearch-cloud-aws插件并配置才能实现自动Discovery。 大致的配置如
# AWS discovery cloud.aws.access_key: KEY cloud.aws.secret_key: KEY plugin.mandatory: cloud-aws discovery.type: ec2 discovery.zen.ping.multicast.enabled: false discovery.ec2.groups: &amp;quot;elasticsearch&amp;quot; discovery.ec2.availability_zones: &amp;quot;ap-northeast-1a&amp;quot; cloud.aws.region: &amp;quot;ap-northeast-1&amp;quot; discovery.ec2.host_type: &amp;quot;public_ip&amp;quot; network.publish_host: [PUBLIC_IP] discovery.ec2.ping_timeout: &amp;quot;30s&amp;quot;  discovery.ec2.groups是你的EC2集群所在的安全组，注意用这种方式的设置会将必须该安全组中所有节点都启动ElasticSearch服务才行，否则会一直等待。 如果不想这样可以使用Tag设置。
discovery.ec2.availability_zones一定要写对，否则节点会无法互相发现，不知道可以看EC2控制面版中有写。
network.publish_host是该节点的公网IP，可使用绑定的弹性IP。
更加详细的设置可以看这里。
有关部署的更加详细的步骤可以参考这里。
注意如果弹性IP更换了绑定的实例之后要ssh之前需要将原来保存在本地的host_key删除，使用命令ssh-keygen -R hostname,否则会报Host key verification failed。
部署在EMR上 安装AWS CLI。 可按照文档安装并配置。
然后直接使用Amazon EMR的bootstrp action脚本即可。 这个仓库中还有其它基于Hadooop的软件的启动脚本，如spark，cascading等。</description>
    </item>
    
  </channel>
</rss>